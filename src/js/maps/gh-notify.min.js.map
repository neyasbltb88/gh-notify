{"version":3,"sources":["gh-notify.min.js"],"names":["GHNotifyItem","params","_classCallCheck","this","templateWrapClasses","concat","type","templateButtonClose","templateButtonAllow","labelAllow","message","container","wrap","confirm","timerStart","timeout","delRun","_this","document","createElement","className","setAttribute","id","classList","add","innerHTML","querySelector","bind","allow_btn","addEventListener","deny_btn","del","close_btn","button","label","appendChild","setTimeout","remove","startTimer","e","_this2","timerID","clearTimeout","detail","currentTarget","getAttribute","CustomEvent","removeChild","_this3","dispatchEvent","Date","now","restTimeout","GHNotify","arguments","length","undefined","offsetY","options","offsetX","place","container_selector","position","parent","default_message","default","new","parent_elem","lastID","buffer","init","_typeof","normalizeParamsItem","labelDeny","apply","notify","item","pauseTimer","place_name","placeLeft","width","placeCenter","placeRight","placeBottom","placeTop","call","console","log","selector","slice","notify_style","detectContainerPlace","notify_style_txt","body","check_container","toString","createContainer","checkContainer","removeFromBuffer","startTimers","window"],"mappings":"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","file":"../gh-notify.min.js","sourcesContent":["class GHNotifyItem {\r\n    constructor(params) {\r\n        this.templateWrapClasses = `flash flash-full ${params.type}`;\r\n        this.templateButtonClose = `\r\n<button class=\"flash-close js-flash-close tooltipped tooltipped-w\" type=\"button\">\r\n    <svg class=\"octicon octicon-x\" viewBox=\"0 0 12 16\" version=\"1.1\" width=\"12\" height=\"16\" aria-hidden=\"true\">\r\n        <path fill-rule=\"evenodd\" d=\"M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z\"/>\r\n    </svg>\r\n</button>`;\r\n        this.templateButtonAllow = `\r\n<button class=\"flash-close js-flash-close tooltipped tooltipped-w\" type=\"button\" data-ghnotify-confirm=\"true\" aria-label=\"${params.labelAllow}\">\r\n    <svg class=\"octicon octicon-check\" viewBox=\"0 0 12 16\" version=\"1.1\" width=\"12\" height=\"16\" aria-hidden=\"true\">\r\n        <path fill-rule=\"evenodd\" d=\"M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z\"></path>\r\n    </svg>\r\n</button>`;\r\n\r\n        this.message = params.message;\r\n        this.id = params.id;\r\n        this.container = params.container;\r\n        this.confirm = params.confirm;\r\n        this.wrap = null;\r\n        this.timeout = null;\r\n        this.timerID = null;\r\n        this.timerStart = null;\r\n        this.delRun = false;\r\n\r\n\r\n        this.init(params);\r\n    }\r\n\r\n    init(params) {\r\n        // Создание обертки\r\n        this.wrap = document.createElement('div');\r\n        this.wrap.className = this.templateWrapClasses;\r\n        this.wrap.setAttribute('data-ghnotify-id', this.id);\r\n        this.wrap.classList.add('h0');\r\n\r\n        // Если нужно, доавляем кнопки\r\n        if (params.confirm) {\r\n            // Для режима подтверждения нужны 2 кнопки:\r\n            this.wrap.innerHTML = this.templateButtonAllow;\r\n            this.wrap.innerHTML += this.templateButtonClose;\r\n            // Кнопка Подтверждения\r\n            let allow_btn = this.wrap.querySelector('[data-ghnotify-confirm=\"true\"]');\r\n            allow_btn.addEventListener('click', this.del.bind(this));\r\n\r\n            // Кнопка Отклонения\r\n            let deny_btn = this.wrap.querySelector('.flash-close:not([data-ghnotify-confirm])');\r\n            deny_btn.setAttribute('aria-label', params.labelDeny);\r\n            deny_btn.setAttribute('data-ghnotify-confirm', false);\r\n            deny_btn.addEventListener('click', this.del.bind(this));\r\n        } else if (params.button) {\r\n            // Кнопка закрытия уведомления\r\n            this.wrap.innerHTML = this.templateButtonClose;\r\n            let close_btn = this.wrap.querySelector('.flash-close');\r\n            close_btn.setAttribute('aria-label', params.label);\r\n            close_btn.addEventListener('click', this.del.bind(this));\r\n        }\r\n\r\n\r\n\r\n        // Создаем сообщение\r\n        let message = document.createElement('div');\r\n        message.className = 'message';\r\n        message.innerHTML = params.message;\r\n\r\n        // и добавляем его в контейнер\r\n        this.wrap.appendChild(message);\r\n\r\n\r\n        // Добавляем всю обертку в родительский контейнер\r\n        this.container.appendChild(this.wrap);\r\n        setTimeout(() => {\r\n            this.wrap.classList.remove('h0');\r\n        }, 10);\r\n\r\n        // Если передано значение тамера, то запускаем его\r\n        if (params.timeout) {\r\n            this.timeout = params.timeout;\r\n            this.startTimer();\r\n        }\r\n    }\r\n\r\n    del(e) {\r\n        // Если процесс удаления еще не запущен\r\n        if (!this.delRun) {\r\n            this.delRun = true;\r\n            // Если был заведен таймер, обнуляем его\r\n            if (this.timerID) {\r\n                clearTimeout(this.timerID);\r\n            }\r\n            // Добавляем класс с анимацией скрытия\r\n            this.wrap.classList.add('h0');\r\n            // Создаем событие, сообщающее об окончании скрытия\r\n            let detail = { id: this.id };\r\n            // Если удаление вызвано кликом по кнопке\r\n            if (e instanceof Event) {\r\n                let confirm = e.currentTarget.getAttribute('data-ghnotify-confirm');\r\n                // Если на кнопке есть атрибут confirm\r\n                if (confirm !== undefined && confirm !== null) {\r\n                    // Добавляем его в детали события\r\n                    detail.confirm = confirm;\r\n                }\r\n            }\r\n            let event = new CustomEvent('close', { detail });\r\n            this.wrap.addEventListener('transitionend', e => {\r\n                // Удаляем уведомление из контейнера\r\n                this.container.removeChild(this.wrap);\r\n                // Испускаем событие удаления\r\n                this.container.dispatchEvent(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    startTimer() {\r\n        // Если есть значение таймаута, запускаем\r\n        if (this.timeout !== null) {\r\n            // Получаем время старта\r\n            this.timerStart = Date.now();\r\n            this.timerID = setTimeout(() => {\r\n                // По истечению таймаута запустим удаление\r\n                this.del();\r\n            }, this.timeout);\r\n        }\r\n    }\r\n\r\n    pauseTimer() {\r\n        // Если таймер был заведен\r\n        if (this.timerID) {\r\n            // Очищаем таймаут\r\n            clearTimeout(this.timerID);\r\n            this.timerID = null;\r\n            // Получаем текущее время\r\n            let now = Date.now();\r\n            // Вычисляем сколько осталось до срабатывания заведенного таймера\r\n            this.restTimeout = this.timeout - (now - this.timerStart);\r\n            // Предотвращаем попадание отрицательных значений\r\n            // (при вызове функции в момент анимации удаления)\r\n            // если значение отрицательное, для верности вызываем удаление\r\n            this.timeout = (this.restTimeout > 0) ? this.restTimeout : this.del();\r\n        }\r\n    }\r\n}\r\n\r\n// ////////////////////////////////////////////////////////////////////////\r\nclass GHNotify {\r\n    constructor(options = {}) {\r\n        // --- Опции ---\r\n        this.offsetY = options.offsetY || '0px';\r\n        this.offsetX = options.offsetX || '0px';\r\n        this.width = options.width || '100%';\r\n        this.place = options.place || 'nw';\r\n\r\n        this.container_selector = options.container || '.notify_container';\r\n        this.position = options.position || 'fixed';\r\n        this.parent = options.parent || 'body';\r\n        this.default_message = options.default || `TEST`;\r\n        this.new = options.new;\r\n        // === Опции===\r\n        this.container = null;\r\n        this.parent_elem = null;\r\n        this.lastID = 0;\r\n        this.buffer = {};\r\n\r\n\r\n        this.init();\r\n    }\r\n\r\n    parseParamsItem() {\r\n        let params = {};\r\n        // Если первый аргумент строка или число, и второй аргумент число,\r\n        // то это текст сообщения и таймер\r\n        if ((typeof arguments[0] === 'string' || typeof arguments[0] === 'number') &&\r\n            typeof arguments[1] === 'number') {\r\n            params.message = arguments[0];\r\n            params.timeout = arguments[1];\r\n\r\n            // Если первый аргумент строка, а второго аргумента нет,\r\n            // то это сообщение без таймера\r\n        } else if (typeof arguments[0] === 'string' && typeof arguments[1] === 'undefined') {\r\n            params.message = arguments[0];\r\n\r\n            // Если первый аргумент число, а второго аргумента нет,\r\n            // то это таймер с дефолтным сообщением\r\n        } else if (typeof arguments[0] === 'number' && typeof arguments[1] === 'undefined') {\r\n            params.timeout = arguments[0];\r\n\r\n            // Если аргумент - это объект\r\n        } else if (typeof arguments[0] === 'object') {\r\n\r\n            return this.normalizeParamsItem(arguments[0]);\r\n\r\n            // Если ничего не передано, то все параметры будут дефолтными\r\n        } else if (typeof arguments[0] === 'undefined') {\r\n\r\n        } else {\r\n            params.message = 'Не правильные аргументы .push()';\r\n        }\r\n\r\n        return this.normalizeParamsItem(params);\r\n    }\r\n\r\n    normalizeParamsItem(params = {}) {\r\n        params.id = ++this.lastID;\r\n        params.container = this.container;\r\n        params.message = (params.message !== undefined) ? params.message : this.default_message + `: ${this.lastID}`;\r\n        params.button = (params.button !== false) ? true : false;\r\n        params.timeout = (params.timeout !== undefined) ? params.timeout : false;\r\n        params.label = (params.label !== undefined) ? params.label : 'Закрыть это уведомление';\r\n        params.confirm = (params.confirm === true) ? true : false;\r\n        params.labelDeny = (params.labelDeny !== undefined) ? params.labelDeny : 'Отклонить';\r\n        params.labelAllow = (params.labelAllow !== undefined) ? params.labelAllow : 'Принять';\r\n        params.type = (params.type !== undefined) ? 'flash-' + params.type : '';\r\n\r\n        return params;\r\n    }\r\n\r\n    push() {\r\n        let params = this.parseParamsItem(...arguments);\r\n        this.buffer[this.lastID] = new GHNotifyItem(params);\r\n        return this.lastID;\r\n    }\r\n\r\n    // Метод для внешнего удаления уведомления\r\n    remove(id) {\r\n        // Вызов метода удаления у соответствующего уведмления\r\n        this.buffer[id].del();\r\n        // После удаления уведомления из контейнера выполнится removeFromBuffer\r\n    }\r\n\r\n    // Метод для внешнего удаления всех уведомлений\r\n    removeAll() {\r\n        for (let notify in this.buffer) {\r\n            this.buffer[notify].del();\r\n        }\r\n    }\r\n\r\n    removeFromBuffer(e) {\r\n        // Вторая фаза удаления - удаление экземпляра уведомления из буфера\r\n        delete this.buffer[e.detail.id];\r\n    }\r\n\r\n    pauseTimers(e) {\r\n        for (let item in this.buffer) {\r\n            this.buffer[item].pauseTimer();\r\n        }\r\n    }\r\n\r\n    startTimers(e) {\r\n        for (let item in this.buffer) {\r\n            this.buffer[item].startTimer();\r\n        }\r\n    }\r\n\r\n    // Анализ положения\r\n    detectContainerPlace(place_name) {\r\n        let place,\r\n            position = this.position,\r\n            offsetX = this.offsetX,\r\n            offsetY = this.offsetY;\r\n\r\n        function placeLeft() {\r\n            let place;\r\n            // Если ширина 100%, вычитаем из нее отступ слева\r\n            if (this.width === '100%') {\r\n                place = `width: calc(${this.width} - ${this.offsetX});`;\r\n            } else {\r\n                place = `width: ${this.width};`;\r\n            }\r\n            place += `left: ${this.offsetX};`;\r\n\r\n            return place;\r\n        }\r\n\r\n        function placeCenter() {\r\n            let place;\r\n            // Если ширина 100%, вычитаем из нее отступ слева\r\n            if (this.width === '100%') {\r\n                place = `width: calc( ${this.width} - ${this.offsetX} );\r\n                left: ${this.offsetX};`;\r\n                // Если ширина задана вручную, то даем translateX для того, чтобы было по центру\r\n            } else {\r\n                place = `width: ${this.width};\r\n                left: calc(${this.offsetX} + 50%);\r\n                transform: translateX(-50%);`;\r\n            }\r\n\r\n            return place;\r\n        }\r\n\r\n        function placeRight() {\r\n            let place;\r\n            // Если ширина 100%, вычитаем из нее отступ справа\r\n            if (this.width === '100%') {\r\n                place = `width: calc( ${this.width} - ${this.offsetX} );`;\r\n            } else {\r\n                place = `width: ${this.width};\r\n                left: calc(100% - (${this.width} + ${this.offsetX}));`;\r\n            }\r\n\r\n            return place;\r\n        }\r\n\r\n        function placeTop(place) {\r\n            place += `top: ${offsetY};`;\r\n            return place;\r\n        }\r\n\r\n        function placeBottom(place) {\r\n            // Если relative, то применяться будут только верхние положения\r\n            if (position == 'relative') {\r\n                place += `top: ${offsetY};`;\r\n            } else {\r\n                place += `bottom: ${offsetY};`;\r\n            }\r\n\r\n            return place;\r\n        }\r\n\r\n        switch (place_name) {\r\n            // Расположение - левый верхний угол\r\n            case 'nw':\r\n                place = placeTop(placeLeft.call(this));\r\n                break;\r\n                // Расположение - сверху по центру\r\n            case 'n':\r\n                place = placeTop(placeCenter.call(this));\r\n                break;\r\n                // Расположение справа вверху\r\n            case 'ne':\r\n                place = placeTop(placeRight.call(this));\r\n                break;\r\n                // Расположение справа внизу\r\n            case 'se':\r\n                place = placeBottom(placeRight.call(this));\r\n                break;\r\n                // Расположение внизу по центру\r\n            case 's':\r\n                place = placeBottom(placeCenter.call(this));\r\n                break;\r\n                // Расположение слева внизу\r\n            case 'sw':\r\n                place = placeBottom(placeLeft.call(this));\r\n                break;\r\n\r\n            default:\r\n                place = placeTop(placeLeft.call(this));\r\n                console.log('place_name: ', place_name);\r\n\r\n                break;\r\n        }\r\n\r\n        return place;\r\n    }\r\n\r\n    createContainer(selector) {\r\n        // Создаем элемент контейнера\r\n        selector = selector.slice(1);\r\n        this.container = document.createElement('div');\r\n        this.container.className = selector;\r\n        this.parent_elem = document.querySelector(this.parent);\r\n        this.parent_elem.appendChild(this.container);\r\n\r\n        // И стили для него\r\n        let notify_style = document.createElement('style');\r\n        notify_style.className = `${selector}_style`;\r\n\r\n        let place = this.detectContainerPlace(this.place);\r\n\r\n        let notify_style_txt = `\r\n        .${selector} {\r\n            position: ${this.position};\r\n            z-index: 99;\r\n            border: 1px solid rgba(27, 31, 35, .15);\r\n            border-width: 0 1px;\r\n            box-sizing: border-box;\r\n            ${place};\r\n        }`;\r\n        notify_style.textContent = notify_style_txt;\r\n        document.body.appendChild(notify_style);\r\n    }\r\n\r\n    checkContainer(selector) {\r\n        // Получаем элемент с селектором контейнера\r\n        let check_container = document.querySelector(selector);\r\n        // Если такой элемент уже существует\r\n        if (check_container && (check_container.toString() === '[object HTMLDivElement]')) {\r\n            // То сохраняем его в свойство\r\n            this.container = check_container;\r\n        } else {\r\n            // Если нет, то создаем контейнер\r\n            this.createContainer(selector);\r\n        }\r\n    }\r\n\r\n\r\n    init() {\r\n        // Принудительно создавать новый контейнер или проверить существование готового\r\n        if (this.new) {\r\n            this.createContainer(this.container_selector);\r\n        } else {\r\n            this.checkContainer(this.container_selector);\r\n        }\r\n\r\n        // Обработчик кастомного события удаления уведомления\r\n        this.container.addEventListener('close', this.removeFromBuffer.bind(this));\r\n\r\n        // Обработчик наведения мыши на контейнер уведомлений\r\n        // используется для того, чтобы ставить на паузу таймеры удаления\r\n        this.container.addEventListener('mouseenter', this.pauseTimers.bind(this));\r\n\r\n        // Обработчик ухода мыши с контейнера уведомлений\r\n        // используется для того, чтобы снова запускать оставшиеся таймеры уведомлений\r\n        this.container.addEventListener('mouseleave', this.startTimers.bind(this));\r\n\r\n    }\r\n}\r\nwindow.GHNotify = GHNotify;"]}